#!/usr/bin/env node

'use strict';

const jspmServer = require('../lib/server'),
  opener = require('opener'),
  program = require('commander')
  packageJson = require('../package.json');

program
  .version(packageJson.version)
  .usage('[path] [options]')
  .description(packageJson.description)
  .option('-O, --open', 'automatically open browser')
  .option('-P, --port <number>', 'port number (defaults to 8888)', parseInt)
  .parse(process.argv);

console.log(' - args', program);


const path = program.args[0],
  host = 'localhost',
  port = (program.port ? program.port : 8888),
  protocol = 'http://',
  command = null;



// main
return;
showInfoHeader();
console.log('http-server started, serving "' + options.baseUrl +
  '" at http://' + options.host + ':' + options.port);
console.log('hit CTRL-C to stop the server\n\n');

if (program.open) {
  opener(protocol + '//' + host + ':' + port, {
    command: command
  });
}

// helpers
function showInfoHeader() {
  const versionInfo = packageJson.version;
  const environmentInfo = (process.env.NODE_ENV === 'production' ? 'production ' : 'development');
  const cachingInfo = (options.caching ? 'enabled ' : 'disabled');
  const hot_reloadInfo = (options.hotReload ? 'enabled ' : 'disabled');

  console.log('\n' +
    '#################################' + '\n' +
    '#    JSPM Hot-Reload Server    ##' + '\n' +
    '#------------------------------##' + '\n' +
    '# version      | ' + versionInfo + '         ##' + '\n' +
    '# environment  | ' + environmentInfo + '   ##' + '\n' +
    '# caching      | ' + cachingInfo + '      ##' + '\n' +
    '# hot-reload   | ' + hot_reloadInfo + '      ##' + '\n' +
    '#################################' + '\n'
  );
}

// exit hooks

if (process.platform === 'win32') {
  require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  }).on('SIGINT', function() {
    process.emit('SIGINT');
  });
}
process.on('SIGINT', function() {
  console.info('http-server stopped');
  process.exit();
});
process.on('SIGTERM', function() {
  console.info('http-server stopped');
  process.exit();
});
