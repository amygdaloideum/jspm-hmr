#!/usr/bin/env node

/*
 *   Copyright 2016 Piotr Witek <piotrek.witek@gmail.com> (http://piotrwitek.github.io)
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

'use strict';
const fs = require('fs'),
  path = require('path'),
  readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const jspmServer = require('../lib/jspm-server'),
  opener = require('opener'),
  program = require('commander'),
  async = require('async'),
  packageJson = require('../package.json');

program
  .version(packageJson.version)
  .description(packageJson.description + '\n  Version: ' + packageJson.version)
  .usage('[path] [options]')
  .option('-I, --init', 'initialize boilerplate index.html with hot-reload setup included')
  .option('-O, --open', 'automatically open browser (defaults to false)')
  .option('-C, --caching [number]', 'enable caching with max-age= (defaults to -1)', parseInt)
  .option('-P, --port <number>', 'port number (defaults to 8888)', parseInt)
  .parse(process.argv);

const options = {
  path: program.args[0] || '.',
  caching: program.caching || -1,
  port: program.port ? program.port : 8888,
  command: null
};

const protocol = 'http',
  host = 'localhost',
  url = protocol + '://' + host + ':' + options.port;

if (program.init) {
  let cancelled = false;

  async.eachSeries(
    ['index.html', 'loader-style.css'],
    function(fileName, done) {
      if (cancelled) {
        done('cancelled');
      }
      const sourceStream = path.join(__dirname, '/../', fileName);
      const targetStream = path.join(process.cwd(), path.sep, fileName);

      fs.createReadStream(sourceStream).pipe(fs.createWriteStream(targetStream, {
        flag: 'wx'
      }, (err) => {
        console.log('start');
        if (err) {
          // file exists error, ask for permission to overwrite
          if (err.code === 'EEXIST') {
            console.error('File "' + fileName + '" already exists in:\n   -> ' + targetStream);
            rl.question('Overwrite? [yes]/no: ', (answer) => {
              if (answer === 'no') {
                console.log('\n  Process cancelled.');
                cancelled = true;
                done(err);
              } else {
                console.log('\n  Overwriting file.');
                fs.createWriteStream(targetStream);
              }
              rl.close();
            });
          }
        } else {
          // write completed
          console.log(`\n  Created "${fileName}" in current working directory.`);
        }
      }));
      done();
    },
    function(err) {
      if (err) {
        console.log('\n Boilerplate initialization failed.');
      } else {
        console.log('\n  Boilerplate initialization completed in current directory.');
      }
    }
  );
} else {
  main();
}

function main() {
  logOptionsInfo();

  // initialize server
  jspmServer.start(options);
  logStartedInfo();

  // open browser
  if (program.open) {
    opener(url, {
      command: options.command
    });
  }
}

// log helpers
function logOptionsInfo() {
  const versionInfo = packageJson.version;
  const environmentInfo = (process.env.NODE_ENV === 'production' ? 'production ' : 'development');
  const cachingInfo = (options.caching ? 'enabled ' : 'disabled');

  console.log('\n' +
    '  ################################' + '\n' +
    '  #    JSPM Hot-Reload Server    #' + '\n' +
    '  #--------------+---------------#' + '\n' +
    '  # version      | ' + versionInfo + '         #' + '\n' +
    '  # environment  | ' + environmentInfo + '   #' + '\n' +
    '  # caching      | ' + cachingInfo + '      #' + '\n' +
    '  ################################' + '\n'
  );
}

function logStartedInfo() {
  console.log('http-server serving "' + options.path + '" at ' + url);
  console.log('hit CTRL-C to stop the server');
}

// exit hooks
if (process.platform === 'win32') {
  require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  }).on('SIGINT', function() {
    process.emit('SIGINT');
  });
}
process.on('SIGINT', function() {
  console.info('\n  http-server stopped');
  process.exit();
});
process.on('SIGTERM', function() {
  console.info('\n  http-server stopped');
  process.exit();
});
